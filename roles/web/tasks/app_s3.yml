# roles/web/tasks/app_s3.yml
- name: Ensure app dir exists
  ansible.builtin.file:
    path: /opt/edunotes
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"

- name: Deploy package.json (S3-ready)
  ansible.builtin.template:
    src: "package.json.j2"
    dest: "/opt/edunotes/package.json"
    owner: edunotes
    group: edunotes
    mode: "0644"

- name: Deploy server.js (backend + metrics + static)
  ansible.builtin.template:
    src: "server.js.j2"
    dest: "/opt/edunotes/server.js"
    owner: edunotes
    group: edunotes
    mode: "0644"

- name: Deploy storage.js (S3 backend helper)
  ansible.builtin.template:
    src: "storage.js.j2"
    dest: "/opt/edunotes/storage.js"
    owner: edunotes
    group: edunotes
    mode: "0644"

# ★ ここからフロント
- name: Ensure public dir
  ansible.builtin.file:
    path: /opt/edunotes/public
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"

- name: Deploy index.html
  ansible.builtin.template:
    src: "index.html.j2"
    dest: "/opt/edunotes/public/index.html"
    owner: edunotes
    group: edunotes
    mode: "0644"

# クリーンインストール
- name: Remove stale lockfile
  ansible.builtin.file:
    path: "/opt/edunotes/package-lock.json"
    state: absent

- name: Remove existing node_modules (clean install)
  ansible.builtin.file:
    path: "/opt/edunotes/node_modules"
    state: absent

- name: Install Node dependencies (prod only, no lock)
  ansible.builtin.command: npm install --omit=dev
  args: { chdir: "/opt/edunotes" }
  environment:
    NODE_ENV: "production"
    HOME: "/home/edunotes"
    npm_config_cache: "/home/edunotes/.npm"
  become: true
  become_user: edunotes

# ── ここから（SSMの /edunotes/redis/url を直接読む）──
- name: Read Redis URL via AWS CLI (from SSM)
  ansible.builtin.command: >
    aws ssm get-parameter
    --name "/edunotes/redis/url"
    --with-decryption
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: redis_url_cmd
  changed_when: false
  failed_when: false

- name: Override redis_url only when SSM param exists
  ansible.builtin.set_fact:
    redis_url: "{{ redis_url_cmd.stdout | trim }}"
  when: redis_url_cmd.rc == 0 and (redis_url_cmd.stdout | trim) != ''

- name: Fallback compose redis_url from facts when SSM missing
  ansible.builtin.set_fact:
    redis_url: "redis://:{{ redis_password | urlencode }}@{{ redis_host }}:6379/0"
  when:
    (redis_url is not defined or (redis_url | trim) == '') and
    (redis_host is defined) and (redis_password is defined)
# ── ここまで ───────────────────────────────────────────

- name: Render /etc/edunotes/env
  ansible.builtin.template:
    src: "app.env.j2"
    dest: "/etc/edunotes/env"
    owner: root
    group: root
    mode: "0644"

- name: Ensure app subdirs for views and routes
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - /opt/edunotes/views
    - /opt/edunotes/views/notes
    - /opt/edunotes/routes

- name: Deploy EJS views
  ansible.builtin.template:
    src: "views/{{ item.src }}"
    dest: "/opt/edunotes/views/{{ item.dest }}"
    owner: edunotes
    group: edunotes
    mode: "0644"
  loop:
    - { src: "layout.ejs.j2",         dest: "layout.ejs" }
    - { src: "login.ejs.j2",          dest: "login.ejs" }
    - { src: "signup.ejs.j2",         dest: "signup.ejs" }
    - { src: "notes/index.ejs.j2",    dest: "notes/index.ejs" }
    - { src: "notes/new.ejs.j2",      dest: "notes/new.ejs" }
    - { src: "notes/show.ejs.j2",     dest: "notes/show.ejs" }
    - { src: "notes/edit.ejs.j2",     dest: "notes/edit.ejs" }

- name: Deploy routes
  ansible.builtin.template:
    src: "routes/{{ item }}.j2"
    dest: "/opt/edunotes/routes/{{ item }}"
    owner: edunotes
    group: edunotes
    mode: "0644"
  loop:
    - auth.js
    - notes.js

- name: Deploy DB schema
  ansible.builtin.template:
    src: "schema.sql.j2"
    dest: "/opt/edunotes/schema.sql"
    owner: edunotes
    group: edunotes
    mode: "0644"

# ★ psql クライアント（Debian/Ubuntu）
- name: Ensure PostgreSQL client is installed
  ansible.builtin.apt:
    name: postgresql-client
    state: present
    update_cache: yes
  when: ansible_os_family | lower == "debian"

# ★ RDS ルート証明書（必要な場合のみ取得）
- name: Ensure RDS global root bundle exists (if path in env)
  ansible.builtin.shell: |
    set -euo pipefail
    # env を読み、PGSSLROOTCERT が /etc/ssl/certs/rds-global-bundle.pem のときだけ取得
    if [ -f /etc/edunotes/env ]; then set -a; . /etc/edunotes/env; set +a; fi
    TARGET="${PGSSLROOTCERT:-}"
    if [ "${TARGET}" = "/etc/ssl/certs/rds-global-bundle.pem" ] && [ ! -s "${TARGET}" ]; then
      curl -fsSL -o "${TARGET}" https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
      chmod 0644 "${TARGET}"
    fi
  args:
    executable: /bin/bash
  changed_when: false

# ★ env を読んでそのまま DB_URL でスキーマ適用（idempotent）
- name: Apply DB schema (idempotent)
  ansible.builtin.shell: |
    set -euo pipefail
    # /etc/edunotes/env を読み込み
    if [ -f /etc/edunotes/env ]; then set -a; . /etc/edunotes/env; set +a; fi
    if [ -z "${DB_URL:-}" ]; then
      echo "[INFO] DB_URL not set. Skip schema apply."
      exit 0
    fi

    CONN="${DB_URL}"

    # もし verify-full が指定されていて rootcert が見つからない場合は一時的に require に変更して適用
    if [ "${PGSSLMODE:-}" = "verify-full" ] && [ -n "${PGSSLROOTCERT:-}" ] && [ ! -s "${PGSSLROOTCERT}" ]; then
      echo "[WARN] PGSSLROOTCERT not found. Temporarily using sslmode=require for schema apply."
      CONN="${DB_URL}?sslmode=require"
    fi

    # psql 実行（失敗時は即エラー）
    psql "${CONN}" -v ON_ERROR_STOP=1 -f /opt/edunotes/schema.sql
  args:
    executable: /bin/bash
  changed_when: false

# （※ 再起動は最後にまとめる：ここが唯一の位置変更）
- name: Restart edunotes service (after all files are in place)
  ansible.builtin.systemd:
    name: edunotes
    state: restarted
    enabled: yes
    daemon_reload: yes
