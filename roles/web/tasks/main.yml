---
# --- Install AWS CLI v2 (distro-agnostic) ---
- name: Detect arch for AWS CLI
  ansible.builtin.set_fact:
    _aws_arch: "{{ 'aarch64' if (ansible_architecture in ['aarch64','arm64']) else 'x86_64' }}"

- name: Ensure unzip/curl are present
  ansible.builtin.package:
    name:
      - unzip
      - curl
    state: present

- name: Download AWS CLI v2 installer
  ansible.builtin.get_url:
    url: "https://awscli.amazonaws.com/awscli-exe-linux-{{ _aws_arch }}.zip"
    dest: /tmp/awscliv2.zip
    mode: "0644"

- name: Unpack AWS CLI v2
  ansible.builtin.unarchive:
    src: /tmp/awscliv2.zip
    dest: /tmp
    remote_src: true

- name: Install AWS CLI v2
  ansible.builtin.command: /tmp/aws/install -i /usr/local/aws -b /usr/local/bin
  args:
    creates: /usr/local/bin/aws

- name: Verify aws cli
  ansible.builtin.command: aws --version
  register: _aws_ver
  changed_when: false

# --- DB: SSM から host/name/user を取得（AWS CLI 版） ---
- name: "Read DB host via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_db_host }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: db_host_cli
  changed_when: false
  retries: 30
  delay: 10
  until: db_host_cli.rc == 0 and (db_host_cli.stdout | length) > 0

- name: "Read DB name via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_db_name }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: db_name_cli
  changed_when: false
  retries: 30
  delay: 10
  until: db_name_cli.rc == 0 and (db_name_cli.stdout | length) > 0

- name: "Read DB user via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_db_user }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: db_user_cli
  changed_when: false
  retries: 30
  delay: 10
  until: db_user_cli.rc == 0 and (db_user_cli.stdout | length) > 0

# --- DB: Secrets Manager から password を取得（AWS CLI 版） ---
- name: "Read DB password via AWS CLI"
  ansible.builtin.command: >
    aws secretsmanager get-secret-value
    --secret-id {{ secret_db_password }}
    --region {{ aws_region }}
    --query SecretString
    --output text
  register: db_pass_cli
  changed_when: false
  retries: 30
  delay: 10
  # JSON でもプレーンでも値が返ってくることを確認
  until: db_pass_cli.rc == 0 and (db_pass_cli.stdout | length) > 0

# --- 取得値を一旦そのまま facts 化（YAML 崩れ防止のためにシンプルに） ---
- name: "Expose raw DB values as facts"
  ansible.builtin.set_fact:
    db_host: "{{ db_host_cli.stdout }}"
    db_name: "{{ db_name_cli.stdout }}"
    db_user: "{{ db_user_cli.stdout }}"
    raw_db_pass: "{{ db_pass_cli.stdout }}"

# --- Secret が dict ですでにパース済みの場合（例：raw_db_pass が mapping） ---
- name: "Use JSON field when secret is already a dict"
  ansible.builtin.set_fact:
    db_pass: "{{ raw_db_pass.password if ('password' in raw_db_pass) else raw_db_pass }}"
  when: raw_db_pass is mapping

# --- Secret が JSON 文字列の場合（先頭が { の文字列） ---
- name: "Use JSON field when secret is a JSON string"
  ansible.builtin.set_fact:
    db_pass: "{{ (raw_db_pass | from_json).password }}"
  when:
    - raw_db_pass is string
    - raw_db_pass | regex_search('^\\s*{')

# --- Secret がプレーン文字列の場合 ---
- name: "Use raw string when secret is plain text"
  ansible.builtin.set_fact:
    db_pass: "{{ raw_db_pass }}"
  when:
    - raw_db_pass is string
    - not (raw_db_pass | regex_search('^\\s*{'))

# --- S3: SSM からバケット名を取得（必須） ---
- name: "Read S3 bucket via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name /edunotes/s3/bucket
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: s3_bucket_cli
  changed_when: false
  retries: 30
  delay: 5
  until: s3_bucket_cli.rc == 0 and (s3_bucket_cli.stdout | length) > 0

- name: "Set S3 facts"
  ansible.builtin.set_fact:
    s3_bucket: "{{ s3_bucket_cli.stdout | trim }}"
    s3_bucket_name: "{{ s3_bucket_cli.stdout | trim }}"

# --- (任意) Redis も SSM から取得したい場合 ---
- name: "Read Redis host via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_redis_host }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: redis_host_cli
  changed_when: false
  failed_when: false

- name: "Read Redis password via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_redis_password }}
    --with-decryption
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: redis_pass_cli
  changed_when: false
  failed_when: false

- name: "Set Redis facts"
  ansible.builtin.set_fact:
    redis_host: "{{ redis_host_cli.stdout | default('') }}"
    redis_pass: "{{ redis_pass_cli.stdout | default('') }}"

# 1) パッケージ
- name: Install base packages
  apt:
    name:
      - curl
      - gnupg
      - nginx
      - git
      - build-essential
    state: present
    update_cache: yes

# 2) Node.js 20 (NodeSource)
- name: Setup NodeSource repo
  shell: |
    set -e
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
  args:
    executable: /bin/bash

- name: Install Node.js
  apt:
    name: nodejs
    state: present
    update_cache: yes

# 3) アプリ用ユーザー/ディレクトリ（★ホーム作成＆/bin/bash）
- name: Ensure app group
  group:
    name: edunotes
    system: yes

- name: Ensure app user
  user:
    name: edunotes
    group: edunotes
    system: yes
    shell: /bin/bash          # ← 変更点
    create_home: yes          # ← 変更点
    home: /home/edunotes      # ← 追加（明示）

- name: Ensure HOME, npm cache, and ansible tmp
  file:
    path: "{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - /home/edunotes
    - /home/edunotes/.npm
    - /home/edunotes/.ansible/tmp

- name: Create app and etc dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - /opt/edunotes
    - /etc/edunotes
    - /var/edunotes/uploads

# 4) アプリ取得（環境変数 APP_REPO_URL / APP_REPO_BRANCH を想定）
- name: Set default app repo vars
  set_fact:
    app_repo: "{{ lookup('env','APP_REPO_URL') | default('', true) }}"
    app_branch: "{{ lookup('env','APP_REPO_BRANCH') | default('main', true) }}"

- name: Clone app repository (optional)
  git:
    repo: "{{ app_repo }}"
    version: "{{ app_branch }}"
    dest: "{{ app_dir }}"        # ← /opt/edunotes 直下に配置
    force: yes
  when: app_repo | length > 0
  become: true                    # ← 追加
  become_user: edunotes

- name: Install dependencies (ci if lock, else install)
  shell: |
    set -e
    cd {{ app_dir }}
    if [ -f package-lock.json ]; then
      npm ci --production
    elif [ -f package.json ]; then
      npm install --production
    fi
  args:
    executable: /bin/bash
  when: app_repo | length > 0
  become: true                    # ← 追加
  become_user: edunotes
  environment:                    # ← 追加（EACCES回避）
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

- name: Add docs dependencies (markdown-it, gray-matter)
  shell: |
    set -e
    cd {{ app_dir }}
    npm install --omit=dev markdown-it gray-matter
  args:
    executable: /bin/bash
  when: app_repo | length > 0
  become: true
  become_user: edunotes
  environment:
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

# 6) Nginx vhost（Ubuntu流儀）
- name: Render nginx vhost
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/edunotes.conf
    mode: "0644"

- name: Enable nginx vhost
  file:
    src: /etc/nginx/sites-available/edunotes.conf
    dest: /etc/nginx/sites-enabled/edunotes.conf
    state: link
    force: yes

- name: Remove default nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Remove any legacy vhost in conf.d to avoid conflicts
  file:
    path: /etc/nginx/conf.d/edunotes.conf
    state: absent

- name: Test nginx config
  command: nginx -t
  register: nginx_test
  changed_when: false
  notify: Restart nginx

# 7) systemd unit
- name: Render systemd service
  template:
    src: edunotes.service.j2
    dest: /etc/systemd/system/edunotes.service
    mode: "0644"

- name: daemon-reload
  systemd:
    daemon_reload: true

# ★ ここが肝：アプリのファイル配置・依存導入・env 生成を「起動前」に実施
# ★ ここが肝：アプリのファイル配置・依存導入・env 生成を「起動前」に実施
- name: Deploy edunotes app (S3)
  import_tasks: app_s3.yml
  tags: ['app']

# --- routes/views の親ディレクトリを先に作る ---
- name: Ensure base directories for routes and views
  ansible.builtin.file:
    path: "/opt/edunotes/{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - routes
    - views

# --- admin/docs のサブディレクトリ ---
- name: Ensure admin/docs view directories exist
  ansible.builtin.file:
    path: "/opt/edunotes/views/{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - admin
    - docs

# --- Docs ディレクトリ（/opt/edunotes/docs） ---
- name: Ensure docs directory exists
  ansible.builtin.file:
    path: /opt/edunotes/docs
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"

- name: Check if role has docs sources
  ansible.builtin.stat:
    path: "{{ role_path }}/files/docs"
  register: docs_src

- name: Ship docs markdown files (if any)
  ansible.builtin.copy:
    src: docs/
    dest: /opt/edunotes/docs/
    owner: edunotes
    group: edunotes
    mode: "0644"
  when: docs_src.stat.exists
  notify: Restart edunotes

# --- ルーターとビューを配布 ---
- name: Ship /admin and /docs routes
  ansible.builtin.template:
    src: "routes/{{ item }}.j2"
    dest: "/opt/edunotes/routes/{{ item }}"
    owner: edunotes
    group: edunotes
    mode: "0644"
  loop: [admin.js, docs.js]
  notify: Restart edunotes

- name: Ship admin/docs views
  ansible.builtin.template:
    src: "views/{{ item.src }}"
    dest: "/opt/edunotes/views/{{ item.dest }}"
    owner: edunotes
    group: edunotes
    mode: "0644"
  loop:
    - { src: "admin/index.ejs.j2", dest: "admin/index.ejs" }
    - { src: "docs/index.ejs.j2",  dest: "docs/index.ejs"  }
    - { src: "docs/show.ejs.j2",   dest: "docs/show.ejs"   }
  notify: Restart edunotes

# --- markdown-it / gray-matter をインストール（S3経路用）---
- name: Add docs dependencies (markdown-it, gray-matter) for S3 app
  ansible.builtin.shell: |
    set -e
    cd /opt/edunotes
    npm install --omit=dev --no-save markdown-it gray-matter
  args:
    executable: /bin/bash
  become: true
  become_user: edunotes
  environment:
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm
  notify: Restart edunotes

- name: Start & enable app
  ansible.builtin.systemd:
    name: edunotes
    enabled: true
    state: started

# ✅ アプリ起動後に nginx を再ロード（vhost 反映）
- name: Reload nginx to apply new vhost (after app is up)
  command: systemctl reload nginx
  when: nginx_test.rc == 0
  become: true
  tags: reload_nginx

# 8) 最終ヘルスチェック（/healthz が 200）
- name: Wait for healthz (final gate)
  uri:
    url: http://127.0.0.1:3000/healthz
    status_code: 200
  register: _final_health
  retries: 30
  delay: 3
  until: _final_health.status == 200

# --- CloudWatch Agent (logs + metrics) ---
- name: Ensure dependencies for CloudWatch Agent
  ansible.builtin.package:
    name:
      - curl
      - unzip
    state: present
    update_cache: yes

# アーキ検出（x86_64 / aarch64）
- name: Detect arch for CW Agent
  ansible.builtin.set_fact:
    _cw_arch: "{{ 'arm64' if (ansible_architecture in ['aarch64','arm64']) else 'amd64' }}"

# .deb ダウンロード（Ubuntu/Debian）
- name: Download CloudWatch Agent .deb
  ansible.builtin.get_url:
    url: "https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/{{ _cw_arch }}/latest/amazon-cloudwatch-agent.deb"
    dest: /tmp/amazon-cloudwatch-agent.deb
    mode: "0644"

- name: Install CloudWatch Agent
  ansible.builtin.apt:
    deb: /tmp/amazon-cloudwatch-agent.deb

# 設定ファイルを設置
- name: Render CloudWatch Agent config
  ansible.builtin.copy:
    dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    mode: "0644"
    content: |
      {
        "agent": {
          "metrics_collection_interval": 60,
          "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
          "debug": false
        },
        "metrics": {
          "namespace": "EduNotes/Host",
          "append_dimensions": {
            "InstanceId": "${aws:InstanceId}"
          },
          "metrics_collected": {
            "cpu": { "resources": ["*"], "measurement": ["usage_system","usage_user","usage_idle"] },
            "mem": { "measurement": ["mem_used_percent","mem_available"] },
            "disk": { "resources": ["*"], "measurement": ["used_percent"] },
            "diskio": { "resources": ["*"], "measurement": ["io_time"] },
            "net": { "resources": ["*"], "measurement": ["bytes_sent","bytes_recv"] }
          }
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/nginx/access.log",
                  "log_group_name": "/edunotes/nginx",
                  "log_stream_name": "{instance_id}-access",
                  "timestamp_format": "%d/%b/%Y:%H:%M:%S %z"
                },
                {
                  "file_path": "/var/log/nginx/error.log",
                  "log_group_name": "/edunotes/nginx",
                  "log_stream_name": "{instance_id}-error"
                },
                {
                  "file_path": "/var/log/edunotes/app.log",
                  "log_group_name": "/edunotes/app",
                  "log_stream_name": "{instance_id}-app"
                },
                {
                  "file_path": "/var/log/syslog",
                  "log_group_name": "/edunotes/system",
                  "log_stream_name": "{instance_id}-syslog"
                }
              ]
            }
          },
          "force_flush_interval": 5
        }
      }

- name: Enable & start CloudWatch Agent
  ansible.builtin.systemd:
    name: amazon-cloudwatch-agent
    enabled: true
    state: restarted

- name: Ensure public dir exists
  ansible.builtin.file:
    path: /opt/edunotes/public
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"

- name: Deploy uploader page
  ansible.builtin.template:
    src: uploader.html.j2
    dest: /opt/edunotes/public/uploader.html
    owner: www-data
    group: www-data
    mode: "0644"

- name: Ensure migrations directory exists
  ansible.builtin.file:
    path: /opt/edunotes/migrations
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"

# --- DB マイグレーション（role 列追加） ---
- name: Place DB migration files
  template:
    src: "migrations/001_add_role_to_users.sql.j2"
    dest: "/opt/edunotes/migrations/001_add_role_to_users.sql"
    owner: edunotes
    group: edunotes
    mode: "0644"

- name: Run migration 001 (idempotent)
  ansible.builtin.shell: |
    set -euo pipefail
    export PGPASSWORD=""
    node -e "console.log('connecting for migration...')" >/dev/null
    psql "${DB_URL}" -v "ON_ERROR_STOP=1" -f /opt/edunotes/migrations/001_add_role_to_users.sql
  args:
    executable: /bin/bash
  vars:
    _db_url_fallback: >-
      postgres://{{ db_user }}:{{ db_pass | urlencode }}@{{ db_host }}:{{ db_port | default(5432) }}/{{ db_name }}
  environment:
    DB_URL: "{{ (lookup('env','DB_URL') | default('') | trim) | default(_db_url_fallback, true) }}"
  register: migration_result
  failed_when: false

# --- seed スクリプト用ディレクトリを先に作る ---
- name: Ensure scripts directory exists
  ansible.builtin.file:
    path: /opt/edunotes/scripts
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"

# --- seed_admin 用の bcrypt を確実に導入（S3配布の場合もカバー） ---
- name: Install bcrypt for seed script
  shell: |
    set -e
    cd /opt/edunotes
    npm install --omit=dev --no-save bcrypt
  args:
    executable: /bin/bash
  become: true
  become_user: edunotes
  environment:
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

- name: Install pg for seed script
  shell: |
    set -e
    cd /opt/edunotes
    npm install --omit=dev --no-save pg
  args:
    executable: /bin/bash
  become: true
  become_user: edunotes
  environment:
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

# --- 管理者ユーザーのシード（初回のみパスワードが必要） ---
- name: Ship seed_admin script
  template:
    src: "scripts/seed_admin.js.j2"
    dest: "/opt/edunotes/scripts/seed_admin.js"
    owner: edunotes
    group: edunotes
    mode: "0755"

- name: Install bcrypt for seed script
  shell: |
    set -e
    cd /opt/edunotes
    npm install --omit=dev --no-save bcrypt
  args:
    executable: /bin/bash
  become: true
  become_user: edunotes
  environment:
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

- name: Install bcryptjs as fallback
  shell: |
    set -e
    cd /opt/edunotes
    npm install --omit=dev --no-save bcryptjs
  args:
    executable: /bin/bash
  become: true
  become_user: edunotes
  environment:
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

- name: Seed admin user (if ADMIN_SEED_PASSWORD is present)
  become: yes
  become_user: edunotes
  shell: |
    set -euo pipefail
    # /etc/edunotes/env を読み込んで APP/DB/REDIS 等の環境を展開
    if [ -f /etc/edunotes/env ]; then set -a; . /etc/edunotes/env; set +a; fi

    # seed 実行時のみ、DB_URL に sslmode=no-verify を付与して証明書検証を無効化
    if [ -n "${DB_URL:-}" ]; then
      case "$DB_URL" in
        *\?*) export DB_URL="${DB_URL}&sslmode=no-verify" ;;
        *)    export DB_URL="${DB_URL}?sslmode=no-verify" ;;
      esac
    fi

    cd /opt/edunotes
    node scripts/seed_admin.js
  args:
    executable: /bin/bash
  register: seed_result
  failed_when: seed_result.rc not in [0]
  when:
    - lookup('env','ADMIN_SEED_PASSWORD') | default('') | length > 0
