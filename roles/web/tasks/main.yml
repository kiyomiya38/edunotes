---
# --- Install AWS CLI v2 (distro-agnostic) ---
- name: Detect arch for AWS CLI
  ansible.builtin.set_fact:
    _aws_arch: "{{ 'aarch64' if (ansible_architecture in ['aarch64','arm64']) else 'x86_64' }}"

- name: Ensure unzip/curl are present
  ansible.builtin.package:
    name:
      - unzip
      - curl
    state: present

- name: Download AWS CLI v2 installer
  ansible.builtin.get_url:
    url: "https://awscli.amazonaws.com/awscli-exe-linux-{{ _aws_arch }}.zip"
    dest: /tmp/awscliv2.zip
    mode: "0644"

- name: Unpack AWS CLI v2
  ansible.builtin.unarchive:
    src: /tmp/awscliv2.zip
    dest: /tmp
    remote_src: true

- name: Install AWS CLI v2
  ansible.builtin.command: /tmp/aws/install -i /usr/local/aws -b /usr/local/bin
  args:
    creates: /usr/local/bin/aws

- name: Verify aws cli
  ansible.builtin.command: aws --version
  register: _aws_ver
  changed_when: false

# --- DB: SSM から host/name/user を取得（AWS CLI 版） ---
- name: "Read DB host via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_db_host }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: db_host_cli
  changed_when: false

- name: "Read DB name via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_db_name }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: db_name_cli
  changed_when: false

- name: "Read DB user via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_db_user }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: db_user_cli
  changed_when: false

# --- DB: Secrets Manager から password を取得（AWS CLI 版） ---
- name: "Read DB password via AWS CLI"
  ansible.builtin.command: >
    aws secretsmanager get-secret-value
    --secret-id {{ secret_db_password }}
    --region {{ aws_region }}
    --query SecretString
    --output text
  register: db_pass_cli
  changed_when: false

# --- 取得値を一旦そのまま facts 化（YAML 崩れ防止のためにシンプルに） ---
- name: "Expose raw DB values as facts"
  ansible.builtin.set_fact:
    db_host: "{{ db_host_cli.stdout }}"
    db_name: "{{ db_name_cli.stdout }}"
    db_user: "{{ db_user_cli.stdout }}"
    raw_db_pass: "{{ db_pass_cli.stdout }}"

# --- Secret が dict ですでにパース済みの場合（例：raw_db_pass が mapping） ---
- name: "Use JSON field when secret is already a dict"
  ansible.builtin.set_fact:
    db_pass: "{{ raw_db_pass.password if ('password' in raw_db_pass) else raw_db_pass }}"
  when: raw_db_pass is mapping

# --- Secret が JSON 文字列の場合（先頭が { の文字列） ---
- name: "Use JSON field when secret is a JSON string"
  ansible.builtin.set_fact:
    db_pass: "{{ (raw_db_pass | from_json).password }}"
  when:
    - raw_db_pass is string
    - raw_db_pass | regex_search('^\\s*{')

# --- Secret がプレーン文字列の場合 ---
- name: "Use raw string when secret is plain text"
  ansible.builtin.set_fact:
    db_pass: "{{ raw_db_pass }}"
  when:
    - raw_db_pass is string
    - not (raw_db_pass | regex_search('^\\s*{'))

# --- (任意) Redis も SSM から取得したい場合 ---
- name: "Read Redis host via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_redis_host }}
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: redis_host_cli
  changed_when: false
  failed_when: false

- name: "Read Redis password via AWS CLI"
  ansible.builtin.command: >
    aws ssm get-parameter
    --name {{ ssm_redis_password }}
    --with-decryption
    --region {{ aws_region }}
    --query 'Parameter.Value'
    --output text
  register: redis_pass_cli
  changed_when: false
  failed_when: false

- name: "Set Redis facts"
  ansible.builtin.set_fact:
    redis_host: "{{ redis_host_cli.stdout | default('') }}"
    redis_pass: "{{ redis_pass_cli.stdout | default('') }}"

# 1) パッケージ
- name: Install base packages
  apt:
    name:
      - curl
      - gnupg
      - nginx
      - git
      - build-essential
    state: present
    update_cache: yes

# 2) Node.js 20 (NodeSource)
- name: Setup NodeSource repo
  shell: |
    set -e
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
  args:
    executable: /bin/bash

- name: Install Node.js
  apt:
    name: nodejs
    state: present
    update_cache: yes

# 3) アプリ用ユーザー/ディレクトリ（★ホーム作成＆/bin/bash）
- name: Ensure app group
  group:
    name: edunotes
    system: yes

- name: Ensure app user
  user:
    name: edunotes
    group: edunotes
    system: yes
    shell: /bin/bash          # ← 変更点
    create_home: yes          # ← 変更点
    home: /home/edunotes      # ← 追加（明示）

- name: Ensure HOME, npm cache, and ansible tmp
  file:
    path: "{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - /home/edunotes
    - /home/edunotes/.npm
    - /home/edunotes/.ansible/tmp

- name: Create app and etc dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: edunotes
    group: edunotes
    mode: "0755"
  loop:
    - /opt/edunotes
    - /etc/edunotes
    - /var/edunotes/uploads

# 4) アプリ取得（環境変数 APP_REPO_URL / APP_REPO_BRANCH を想定）
- name: Set default app repo vars
  set_fact:
    app_repo: "{{ lookup('env','APP_REPO_URL') | default('', true) }}"
    app_branch: "{{ lookup('env','APP_REPO_BRANCH') | default('main', true) }}"

- name: Clone app repository (optional)
  git:
    repo: "{{ app_repo }}"
    version: "{{ app_branch }}"
    dest: /opt/edunotes          # ← /opt/edunotes 直下に配置
    force: yes
  when: app_repo | length > 0
  become: true                    # ← 追加
  become_user: edunotes

- name: Install dependencies (ci if lock, else install)
  shell: |
    set -e
    cd /opt/edunotes
    if [ -f package-lock.json ]; then
      npm ci --production
    elif [ -f package.json ]; then
      npm install --production
    fi
  args:
    executable: /bin/bash
  when: app_repo | length > 0
  become: true                    # ← 追加
  become_user: edunotes
  environment:                    # ← 追加（EACCES回避）
    HOME: /home/edunotes
    npm_config_cache: /home/edunotes/.npm

# 4.5) repo 未設定でも /healthz を上げる “保険” の最小アプリ
- name: Seed minimal app when repo is not provided
  block:
    - name: Create minimal server.js
      copy:
        dest: /opt/edunotes/server.js
        owner: edunotes
        group: edunotes
        mode: "0644"
        content: |
          const express = require("express");
          const app = express();
          app.get("/", (req,res)=>res.send("ok"));
          app.get("/healthz",(req,res)=>res.send("ok"));
          app.get("/readyz",(req,res)=>res.send("ok"));
          app.get("/metrics",(req,res)=>res.type("text/plain").send("# HELP dummy 1\n# TYPE dummy counter\ndummy 1\n"));
          const port = process.env.PORT || 3000;
          app.listen(port, ()=>console.log("listen", port));

    - name: Init package.json if missing
      command: npm init -y
      args:
        chdir: /opt/edunotes
        creates: /opt/edunotes/package.json
      become: true
      become_user: edunotes
      environment:
        HOME: /home/edunotes
        npm_config_cache: /home/edunotes/.npm

    - name: Install express for minimal app
      command: npm install express --production
      args:
        chdir: /opt/edunotes
      become: true
      become_user: edunotes
      environment:
        HOME: /home/edunotes
        npm_config_cache: /home/edunotes/.npm
  when: app_repo | length == 0

# 5) .env（フェーズ1：ローカル添付・非Redis）
- name: Render env file
  template:
    src: envfile.j2
    dest: /etc/edunotes/env
    owner: edunotes
    group: edunotes
    mode: "0640"

# 6) Nginx vhost（Ubuntu流儀）
- name: Render nginx vhost
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/edunotes.conf
    mode: "0644"

- name: Enable nginx vhost
  file:
    src: /etc/nginx/sites-available/edunotes.conf
    dest: /etc/nginx/sites-enabled/edunotes.conf
    state: link
    force: yes

- name: Remove default nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Remove any legacy vhost in conf.d to avoid conflicts
  file:
    path: /etc/nginx/conf.d/edunotes.conf
    state: absent

- name: Test nginx config
  command: nginx -t
  register: nginx_test
  changed_when: false
  notify: Restart nginx

# 7) systemd unit（非root）
- name: Render systemd service
  template:
    src: edunotes.service.j2
    dest: /etc/systemd/system/edunotes.service
    mode: "0644"

- name: daemon-reload
  systemd:
    daemon_reload: true

- name: Start & enable app
  systemd:
    name: edunotes
    enabled: true
    state: started

# ✅ アプリ起動後にnginxを再ロード
- name: Reload nginx to apply new vhost (after app is up)
  command: systemctl reload nginx
  when: nginx_test.rc == 0
  become: true
  tags: reload_nginx

# 8) ヘルスチェック (/healthz が 200 を返すこと)
- name: Wait for healthz
  uri:
    url: http://127.0.0.1:3000/healthz
    status_code: 200
  register: health
  retries: 30
  delay: 3
  until: health.status == 200

# === (追加) Node Exporter ===
- name: Install node exporter
  apt:
    name: prometheus-node-exporter
    state: present
    update_cache: yes

- name: Enable node exporter
  systemd:
    name: prometheus-node-exporter
    enabled: true
    state: started

# === (追加) Fluent Bit ===
- name: Install fluent-bit
  apt:
    name: fluent-bit
    state: present
    update_cache: yes

- name: Render fluent-bit config
  copy:
    dest: /etc/fluent-bit/fluent-bit.conf
    content: |
      [SERVICE]
          Parsers_File parsers.conf

      [INPUT]
          Name tail
          Path /var/log/nginx/access.log
          Tag nginx.access
          Refresh_Interval 5
          Mem_Buf_Limit 10MB
          Skip_Long_Lines On

      [INPUT]
          Name tail
          Path /var/log/nginx/error.log
          Tag nginx.error

      [INPUT]
          Name tail
          Path /var/log/edunotes/app.log
          Tag app

      [OUTPUT]
          Name cloudwatch_logs
          Match *
          log_group_name edunotes
          log_stream_name web-${HOSTNAME}
          region {{ aws_region }}
          auto_create_group true

- name: Enable fluent-bit
  systemd:
    name: fluent-bit
    enabled: true
    state: restarted
