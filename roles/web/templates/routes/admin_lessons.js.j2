// roles/web/templates/routes/admin_lessons.js.j2
const express = require('express');
const router = express.Router();
const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');

function requireAdmin(req, res, next) {
  if (req.session && req.session.user && req.session.user.role === 'admin') return next();
  return res.status(403).send('Forbidden');
}

// 1) レッスン作成
router.post('/lessons', requireAdmin, async (req, res) => {
  const { title, slug, type } = req.body;
  if (!title || !slug || !['text','video'].includes(type)) return res.status(400).json({ error: 'bad params' });
  const db = req.app.get('db');
  const r = await db.query(`INSERT INTO lessons(title, slug, type) VALUES($1,$2,$3) RETURNING id`, [title, slug, type]);
  const id = r.rows[0].id;
  if (type === 'text') await db.query(`INSERT INTO lesson_texts(lesson_id, body_md) VALUES($1,$2)`, [id, '# 新規テキスト']);
  else await db.query(`INSERT INTO lesson_videos(lesson_id,status) VALUES($1,'pending')`, [id]);
  res.json({ id });
});

// 2) テキスト保存
router.put('/lessons/:id/text', requireAdmin, async (req, res) => {
  const { body_md } = req.body;
  const db = req.app.get('db');
  await db.query(`UPDATE lesson_texts SET body_md=$1, version=version+1, updated_at=now() WHERE lesson_id=$2`, [body_md || '', req.params.id]);
  res.json({ ok: true });
});

// 3) 動画アップロード用 事前署名URL
router.post('/lessons/:id/video/presign', requireAdmin, async (req, res) => {
  const { filename, contentType } = req.body;
  const Key = `videos/${req.params.id}/source/${filename}`;
  const s3 = new S3Client({ region: process.env.S3_REGION });
  const url = await getSignedUrl(s3, new PutObjectCommand({ Bucket: process.env.S3_BUCKET, Key, ContentType: contentType || 'application/octet-stream' }), { expiresIn: 60 * 10 });
  res.json({ url, key: Key, expiresIn: 600 });
});

// 4) 動画アップロード完了確定
router.post('/lessons/:id/video/complete', requireAdmin, async (req, res) => {
  const { s3_key, size, duration_sec } = req.body;
  const db = req.app.get('db');
  await db.query(
    `UPDATE lesson_videos SET s3_key_mp4=$1, size_bytes=$2, duration_sec=$3, status='ready', updated_at=now()
     WHERE lesson_id=$4`,
    [s3_key, size || null, duration_sec || null, req.params.id]
  );
  res.json({ ok: true });
});

// 5) 公開/タイトル等の更新
router.patch('/lessons/:id', requireAdmin, async (req, res) => {
  const { title, slug, published, visibility } = req.body;
  const db = req.app.get('db');
  await db.query(
    `UPDATE lessons SET
       title = COALESCE($2, title),
       slug  = COALESCE($3, slug),
       published = COALESCE($4, published),
       visibility = COALESCE($5, visibility),
       updated_at = now()
     WHERE id=$1`,
    [req.params.id, title || null, slug || null, published, visibility || null]
  );
  res.json({ ok: true });
});

module.exports = router;
