// roles/web/templates/routes/admin_lessons.js.j2
const express = require('express');
const router = express.Router();
const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');

function requireAdmin(req, res, next) {
  if (req.session && req.session.user && req.session.user.role === 'admin') return next();
  return res.status(403).send('Forbidden');
}

// ---- slug ユーティリティ ----
function slugify(input, fallback = 'item') {
  if (!input) return fallback;
  const s = String(input)
    .normalize('NFKD')                  // 合成文字分解
    .replace(/[\u0300-\u036f]/g, '')    // ダイアクリティカル除去
    .replace(/[^\w\s-]/g, ' ')          // 記号→スペース
    .replace(/[_\s]+/g, '-')            // 空白/アンダーバー→-
    .toLowerCase()
    .replace(/-+/g, '-')                // 連続-を1個に
    .replace(/^-+|-+$/g, '');           // 前後の-除去
  // 長すぎると INDEX/URL 的に辛いので 80 文字に丸める
  return s.length ? s.slice(0, 80) : fallback;
}

// DB で slug の重複を避ける（既存にあれば -2, -3… 付与）
async function ensureUniqueSlug(db, base) {
  let candidate = base;
  let i = 2;
  while (true) {
    const { rows } = await db.query('SELECT 1 FROM lessons WHERE slug=$1 LIMIT 1', [candidate]);
    if (rows.length === 0) return candidate;
    candidate = (base + '-' + i).slice(0, 80);
    i++;
  }
}

// 1) レッスン作成（Text / Video 共通）
router.post('/lessons', requireAdmin, async (req, res) => {
  try {
    let { title, slug, type } = req.body || {};
    if (!title || !type || !['text','video'].includes(type)) {
      return res.status(400).json({ error: 'bad params: require title and type(text|video)' });
    }

    // slug 未指定なら title から自動生成（動画はファイル名が分かればフロントで付与も可）
    if (!slug || !String(slug).trim()) {
      slug = slugify(title, type === 'video' ? 'video' : 'text');
    } else {
      slug = slugify(slug);
    }

    const db = req.app.get('db');
    slug = await ensureUniqueSlug(db, slug);

    const r = await db.query(
      `INSERT INTO lessons(title, slug, type) VALUES($1,$2,$3) RETURNING id`,
      [title, slug, type]
    );
    const id = r.rows[0].id;

    if (type === 'text') {
      await db.query(`INSERT INTO lesson_texts(lesson_id, body_md) VALUES($1,$2)`, [id, '# 新規テキスト']);
    } else {
      await db.query(`INSERT INTO lesson_videos(lesson_id, status) VALUES($1,'pending')`, [id]);
    }

    res.json({ id, slug });
  } catch (e) {
    console.error(e);
    // UNIQUE違反等はここに来るので、念のため slug 付番リトライをしても良いが
    // 平常時は ensureUniqueSlug で回避できる
    res.status(500).json({ error: 'create failed' });
  }
});

// 2) テキスト保存
router.put('/lessons/:id/text', requireAdmin, async (req, res) => {
  try {
    const { body_md } = req.body || {};
    const db = req.app.get('db');
    await db.query(
      `UPDATE lesson_texts SET body_md=$1, version=version+1, updated_at=now() WHERE lesson_id=$2`,
      [body_md || '', req.params.id]
    );
    res.json({ ok: true });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'update text failed' });
  }
});

// 3) 動画アップロード用 事前署名URL
router.post('/lessons/:id/video/presign', requireAdmin, async (req, res) => {
  try {
    const { filename, contentType } = req.body || {};
    if (!filename) return res.status(400).json({ error: 'filename required' });

    const Key = `videos/${req.params.id}/source/${filename}`;
    const s3 = new S3Client({ region: process.env.S3_REGION });
    const url = await getSignedUrl(
      s3,
      new PutObjectCommand({
        Bucket: process.env.S3_BUCKET,
        Key,
        ContentType: contentType || 'video/mp4'
      }),
      { expiresIn: 60 * 10 }
    );
    res.json({ url, key: Key, expiresIn: 600 });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'presign failed' });
  }
});

// 4) 動画アップロード完了確定
router.post('/lessons/:id/video/complete', requireAdmin, async (req, res) => {
  try {
    const { s3_key, size, duration_sec } = req.body || {};
    const db = req.app.get('db');
    await db.query(
      `UPDATE lesson_videos
         SET s3_key_mp4=$1, size_bytes=$2, duration_sec=$3, status='ready', updated_at=now()
       WHERE lesson_id=$4`,
      [s3_key || null, size || null, duration_sec || null, req.params.id]
    );
    res.json({ ok: true });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'complete failed' });
  }
});

// 5) 公開/タイトル等の更新
router.patch('/lessons/:id', requireAdmin, async (req, res) => {
  try {
    const { title, slug, published, visibility } = req.body || {};
    const db = req.app.get('db');

    // slug を更新する場合は正規化＋一意チェック
    let newSlug = null;
    if (typeof slug === 'string' && slug.trim() !== '') {
      newSlug = slugify(slug);
      newSlug = await ensureUniqueSlug(db, newSlug);
    }

    await db.query(
      `UPDATE lessons SET
         title      = COALESCE($2, title),
         slug       = COALESCE($3, slug),
         published  = COALESCE($4, published),
         visibility = COALESCE($5, visibility),
         updated_at = now()
       WHERE id=$1`,
      [req.params.id, title || null, newSlug, published, visibility || null]
    );
    res.json({ ok: true, slug: newSlug || undefined });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'patch failed' });
  }
});

module.exports = router;
