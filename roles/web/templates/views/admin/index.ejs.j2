<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8"/>
  <title><%= title || "管理ダッシュボード" %></title>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <style>
    body { font-family: system-ui,-apple-system,Segoe UI,Roboto; max-width: 980px; margin: 24px auto; padding: 0 16px; line-height: 1.6; }
    h1 { margin-bottom:.5rem; }
    ul { list-style: disc; padding-left: 1.5em; }
    a { color:#06c; text-decoration:none } a:hover{ text-decoration:underline }
    section { margin-top:2rem }
    form { border:1px solid #e5e7eb; border-radius:10px; padding:16px; margin-top:.75rem }
    form h3{ margin:0 0 .5rem 0 }
    label{ display:block; margin:.55rem 0 .25rem; font-weight:600 }
    input[type=text]{ width:100%; max-width:560px; padding:.5rem; border:1px solid #cbd5e1; border-radius:8px }
    input[type=file], textarea{ width:100%; max-width:560px }
    textarea{ min-height:160px; padding:.5rem; border:1px solid #cbd5e1; border-radius:8px }
    .row{ display:flex; gap:12px; align-items:center; flex-wrap:wrap }
    .btn{ display:inline-block; padding:.55rem .9rem; border:1px solid #cbd5e1; border-radius:8px; background:#f8fafc; cursor:pointer }
    .btn.primary{ background:#0a66ff; color:#fff; border-color:#0a66ff }
    .muted{ color:#64748b; font-size:.95rem }
    .ok{ color:#067d00 } .err{ color:#c00 }
    progress{ width: 320px; height: 10px; }
    .tips{ font-size:.9rem; color:#475569 }
  </style>
</head>
<body>
  <h1>管理ダッシュボード</h1>

  <ul>
    <li>ユーザー数: <strong><%= stats.users %></strong></li>
    <li>ノート数: <strong><%= stats.notes %></strong></li>
  </ul>

  <p><a href="/docs">→ 受講マニュアル (/docs)</a></p>

  <section>
    <h2>教材管理（受講者向けページ）</h2>
    <ul>
      <li><a href="/courses">📘 教材テキスト一覧</a></li>
      <li><a href="/vod">🎥 講義動画一覧</a></li>
    </ul>
  </section>

  <section>
    <h2>ローカルファイルからアップロード（ミニフォーム）</h2>

    <!-- 1) テキスト教材：.md を読んで本文として保存 -->
    <form id="form-text">
      <h3>📘 テキスト（Markdown）アップロード</h3>

      <label for="t-title">タイトル</label>
      <input id="t-title" type="text" placeholder="例）第1回 イントロ" required />

      <label for="t-slug">スラッグ（URL識別子）</label>
      <!-- required を削除（任意入力） -->
      <input id="t-slug" type="text" placeholder="例）intro-1" />

      <label for="t-file">Markdown ファイル（.md）</label>
      <input id="t-file" type="file" accept=".md,text/markdown,text/plain" required />

      <div class="row" style="margin-top:.5rem">
        <label class="row" style="font-weight:normal">
          <input id="t-publish" type="checkbox" checked /> 公開する（受講者に表示）
        </label>
        <button class="btn primary" type="submit">アップロードして作成</button>
        <span id="t-msg" class="muted"></span>
      </div>
      <p class="tips">作成後は <code>/courses</code> に表示されます。</p>
    </form>

    <!-- 2) 動画レッスン：mp4 を S3 直PUT（事前署名） -->
    <form id="form-video">
      <h3>🎥 動画（MP4）アップロード</h3>

      <label for="v-title">タイトル</label>
      <input id="v-title" type="text" placeholder="例）第1回 講義動画" required />

      <label for="v-slug">スラッグ（URL識別子）</label>
      <!-- required を削除（任意入力） -->
      <input id="v-slug" type="text" placeholder="例）video-1" />

      <label for="v-file">動画ファイル（.mp4）</label>
      <input id="v-file" type="file" accept="video/mp4" required />

      <div class="row" style="margin-top:.5rem">
        <button class="btn primary" type="submit">アップロードして作成</button>
        <progress id="v-progress" value="0" max="100" style="display:none"></progress>
        <span id="v-msg" class="muted"></span>
      </div>
      <p class="tips">アップロード完了後に自動で公開します（受講者は <code>/vod</code> から再生）。</p>
    </form>
  </section>

  <script>
    async function postJSON(url, body) {
      const r = await fetch(url, {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify(body),
        credentials: 'same-origin'   // セッションクッキー送信
      });
      if (!r.ok) throw new Error(await r.text());
      return r.json();
    }
    async function putJSON(url, body) {
      const r = await fetch(url, {
        method:'PUT',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify(body),
        credentials: 'same-origin'   // セッションクッキー送信
      });
      if (!r.ok) throw new Error(await r.text());
      return r.json();
    }
    async function patchJSON(url, body) {
      const r = await fetch(url, {
        method:'PATCH',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify(body),
        credentials: 'same-origin'   // セッションクッキー送信
      });
      if (!r.ok) throw new Error(await r.text());
      return r.json();
    }

    /* ==== 追加：スラッグ自動生成ユーティリティ & 自動補完 ==== */
    function makeSlug(input, fallback = 'item') {
      const base = String(input || '')
        .normalize('NFKD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[^\w\s-]/g, ' ')
        .replace(/[_\s]+/g, '-')
        .toLowerCase()
        .replace(/-+/g, '-')
        .replace(/^-+|-+$/g, '');
      return (base || fallback).slice(0, 80);
    }

    // テキスト：タイトル/ファイルから自動補完
    const tTitle = document.getElementById('t-title');
    const tSlug  = document.getElementById('t-slug');
    const tFile  = document.getElementById('t-file');
    tTitle?.addEventListener('input', () => { if (!tSlug.value.trim()) tSlug.value = makeSlug(tTitle.value); });
    tFile?.addEventListener('change', () => {
      if (!tSlug.value.trim() && tFile.files[0]) {
        tSlug.value = makeSlug(tFile.files[0].name.replace(/\.[^.]+$/, ''), 'text');
      }
    });

    // 動画：タイトル/ファイルから自動補完
    const vTitle = document.getElementById('v-title');
    const vSlug  = document.getElementById('v-slug');
    const vFile  = document.getElementById('v-file');
    vTitle?.addEventListener('input', () => { if (!vSlug.value.trim()) vSlug.value = makeSlug(vTitle.value); });
    vFile?.addEventListener('change', () => {
      if (!vSlug.value.trim() && vFile.files[0]) {
        vSlug.value = makeSlug(vFile.files[0].name.replace(/\.[^.]+$/, ''), 'video');
      }
    });
    /* ==== 自動生成ここまで ==== */

    // ===== 1) テキスト（.md） =====
    document.getElementById('form-text').addEventListener('submit', async (e) => {
      e.preventDefault();
      const msg = document.getElementById('t-msg');
      msg.className = 'muted';
      msg.textContent = '作成中…';

      try {
        const title = document.getElementById('t-title').value.trim();
        // 空なら送信直前に自動生成（保険）
        const slugInput = document.getElementById('t-slug').value.trim();
        const file  = document.getElementById('t-file').files[0];
        const pub   = document.getElementById('t-publish').checked;
        if (!file) throw new Error('Markdownファイルを選択してください');

        // ファイル内容を読む
        const body_md = await new Promise((res, rej) => {
          const fr = new FileReader();
          fr.onerror = () => rej(new Error('ファイル読み込みに失敗'));
          fr.onload = () => res(String(fr.result || ''));
          fr.readAsText(file, 'utf-8');
        });

        const slug = slugInput || makeSlug(title || (file?.name.replace(/\.[^.]+$/, '') || 'text'));

        // 1) レッスン作成
        const { id } = await postJSON('/admin/lessons', { title, slug, type:'text' });
        // 2) 本文保存
        await putJSON(`/admin/lessons/${id}/text`, { body_md });
        // 3) 公開
        if (pub) await patchJSON(`/admin/lessons/${id}`, { published:true, visibility:'public' });

        msg.className = 'ok';
        msg.textContent = `作成しました（ID: ${id}）。一覧へ移動します…`;
        setTimeout(() => location.href = '/courses', 600);
      } catch (err) {
        console.error(err);
        msg.className = 'err';
        msg.textContent = '失敗：' + (err?.message || 'unknown');
      }
    });

    // ===== 2) 動画（mp4 → S3直PUT） =====
    document.getElementById('form-video').addEventListener('submit', async (e) => {
      e.preventDefault();
      const msg = document.getElementById('v-msg');
      const bar = document.getElementById('v-progress');
      msg.className = 'muted';
      msg.textContent = '作成中…';

      try {
        const title = document.getElementById('v-title').value.trim();
        const slugInput = document.getElementById('v-slug').value.trim();
        const file  = document.getElementById('v-file').files[0];
        if (!file) throw new Error('動画ファイル（.mp4）を選択してください');

        const slug = slugInput || makeSlug(title || (file?.name.replace(/\.[^.]+$/, '') || 'video'));

        // 1) レッスン枠
        const { id } = await postJSON('/admin/lessons', { title, slug, type:'video' });

        // 2) presign を取得
        const presign = await postJSON(`/admin/lessons/${id}/video/presign`, {
          filename: file.name,
          size: file.size,
          contentType: file.type || 'video/mp4'
        });

        // 3) S3 へ直PUT（進捗表示）
        await new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          xhr.open('PUT', presign.url);
          xhr.setRequestHeader('Content-Type', file.type || 'video/mp4');
          xhr.upload.onprogress = (ev) => {
            if (ev.lengthComputable) {
              bar.style.display = '';
              bar.value = Math.round(ev.loaded / ev.total * 100);
            }
          };
          xhr.onerror = () => reject(new Error('アップロード失敗'));
          xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? resolve() : reject(new Error('S3応答コード: ' + xhr.status));
          xhr.send(file);
        });

        // 4) 完了通知 + 公開
        await postJSON(`/admin/lessons/${id}/video/complete`, {
          s3_key: presign.key,
          size: file.size,
          duration_sec: null
        });
        await patchJSON(`/admin/lessons/${id}`, { published:true, visibility:'public' });

        msg.className = 'ok';
        msg.textContent = `アップロード完了・公開しました（ID: ${id}）。一覧へ移動します…`;
        setTimeout(() => location.href = '/vod', 800);
      } catch (err) {
        console.error(err);
        msg.className = 'err';
        msg.textContent = '失敗：' + (err?.message || 'unknown');
      } finally {
        bar.style.display = 'none';
        bar.value = 0;
      }
    });
  </script>
</body>
</html>
