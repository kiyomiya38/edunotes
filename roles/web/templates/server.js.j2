require('dotenv').config();
const express = require('express');
const helmet = require('helmet');
const session = require('express-session');
const RedisStoreFactory = require('connect-redis').default || require('connect-redis');
const IORedis = require('ioredis');
const { Pool } = require('pg');
const prom = require('prom-client');
const { v4: uuid } = require('uuid');

const storage = require('./storage');

const app = express();
app.use(helmet());
app.use(express.json({ limit: '10mb' }));

// Metrics
const register = new prom.Registry();
prom.collectDefaultMetrics({ register });
const httpCounter = new prom.Counter({ name: 'http_requests_total', help: 'Total HTTP', labelNames: ['route','method','status'] });
register.registerMetric(httpCounter);
app.use((req,res,next)=>{ res.on('finish', ()=> httpCounter.inc({ route: req.route?.path || req.path, method: req.method, status: res.statusCode })); next(); });

// Redis Session
const redisClient = new IORedis(process.env.REDIS_URL || 'redis://127.0.0.1:6379/0');
const RedisStore = RedisStoreFactory(session);
app.use(session({
  store: new RedisStore({ client: redisClient }),
  secret: process.env.SESSION_SECRET || 'dev',
  resave: false, saveUninitialized: false,
  cookie: { httpOnly: true, sameSite: 'lax', secure: false, maxAge: 1000*60*60*24 }
}));

// DB（まだ未準備でもOK。/readyz は一時的に失敗する想定）
const pool = new Pool({ connectionString: process.env.DB_URL, max: 10, idleTimeoutMillis: 30000 });

// Health / Metrics / Ready
app.get('/healthz', (req,res)=> res.status(200).send('ok'));
app.get('/metrics', async (req,res)=>{ res.type(register.contentType); res.end(await register.metrics()); });
app.get('/readyz', async (req,res)=>{
  try { await pool.query('SELECT 1'); await redisClient.ping(); await storage.selfCheck(); res.status(200).send('ready'); }
  catch(e){ res.status(500).send('not ready: '+e.message); }
});

// トップ
app.get('/', (req,res)=> res.send('EduNotes running (S3 mode base)'));

// 添付アップロード（最小動作）: POST /api/notes/:id/attachments { content(base64), filename, content_type }
app.post('/api/notes/:id/attachments', async (req,res)=>{
  const noteId = req.params.id;
  const { content, filename, content_type } = req.body || {};
  if (!content || !filename) return res.status(400).json({ error: 'content/filename required' });
  const buf = Buffer.from(content, 'base64');
  const key = `${noteId}/${uuid()}-${filename}`;
  await storage.saveBuffer(key, buf, content_type || 'application/octet-stream');
  const url = await storage.getSignedUrl(key);
  res.status(201).json({ object_key: key, url });
});

const port = process.env.APP_PORT || 3000;
app.listen(port, ()=> console.log(`[edunotes] listening on ${port}`));
