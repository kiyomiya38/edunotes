const express = require("express");
const morgan = require("morgan");
const multer = require("multer");
const promClient = require("prom-client");

const { saveBuffer, getSignedUrl, remove, selfCheck } = require("./storage");

// --- env ---
const PORT = parseInt(process.env.PORT || "3000", 10);
const UPLOAD_DIR = process.env.UPLOAD_DIR || "/var/edunotes/uploads";

// --- monitoring ---
promClient.collectDefaultMetrics();
const httpReqCounter = new promClient.Counter({
  name: "http_requests_total",
  help: "Total number of HTTP requests",
  labelNames: ["method", "route", "status"],
});

// --- express ---
const app = express();
app.use(express.json());
app.use(morgan("combined"));

const upload = multer({ storage: multer.memoryStorage() });

// health
app.get("/healthz", (_req, res) => res.status(200).send("ok"));

// readiness: simple S3 self-check
app.get("/readyz", async (_req, res) => {
  try {
    await selfCheck();
    res.status(200).send("ready");
  } catch (err) {
    console.error("readiness failed:", err);
    res.status(503).send("not ready");
  }
});

// metrics
app.get("/metrics", async (_req, res) => {
  try {
    res.set("Content-Type", promClient.register.contentType);
    res.end(await promClient.register.metrics());
  } catch (err) {
    res.status(500).end(err.message);
  }
});

// upload to S3
app.post("/upload", upload.single("file"), async (req, res) => {
  if (!req.file) return res.status(400).json({ error: "file is required" });
  try {
    const key = `uploads/${Date.now()}-${req.file.originalname}`;
    await saveBuffer(key, req.file.buffer, req.file.mimetype || "application/octet-stream");
    res.json({ key });
  } catch (err) {
    console.error("upload failed:", err);
    res.status(500).json({ error: "upload failed" });
  }
});

// get signed url
app.get("/files/:key", async (req, res) => {
  try {
    const url = await getSignedUrl(req.params.key);
    res.json({ url });
  } catch (err) {
    console.error("presign failed:", err);
    res.status(500).json({ error: "presign failed" });
  }
});

// delete
app.delete("/files/:key", async (req, res) => {
  try {
    await remove(req.params.key);
    res.status(204).end();
  } catch (err) {
    console.error("delete failed:", err);
    res.status(500).json({ error: "delete failed" });
  }
});

// root
app.get("/", (_req, res) => {
  res.type("text/plain").send("EduNotes backend is running.");
});

// instrumentation
app.use((req, res, next) => {
  const end = res.end;
  res.end = function (...args) {
    httpReqCounter.inc({ method: req.method, route: req.route?.path || req.path, status: res.statusCode });
    end.call(this, ...args);
  };
  next();
});

// start
app.listen(PORT, () => {
  console.log(`edunotes listening on ${PORT}`);
});
