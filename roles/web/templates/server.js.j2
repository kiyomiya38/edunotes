// server.js.j2
const express = require("express");
const morgan = require("morgan");
const multer = require("multer");
const prom = require("prom-client");
const path = require("path");

const { saveBuffer, getSignedUrl, remove, selfCheck } = require("./storage");

// --- basic app setup ---
const app = express();
const PORT = parseInt(process.env.APP_PORT || "3000", 10);

// logging
app.use(morgan("combined"));

// static (public フォルダに index.html などを置く)
app.use(express.static(path.join(__dirname, "public")));

// metrics
const collectDefaultMetrics = prom.collectDefaultMetrics;
collectDefaultMetrics();
app.get("/metrics", async (_req, res) => {
  res.set("Content-Type", prom.register.contentType);
  res.end(await prom.register.metrics());
});

// health/ready
app.get("/healthz", (_req, res) => res.status(200).send("ok"));
app.get("/readyz", async (_req, res) => {
  try {
    await selfCheck();
    res.status(200).send("ready");
  } catch (e) {
    res.status(500).send("not ready");
  }
});

// --- upload API (サーバ側でS3へ保存) ---
const upload = multer({ storage: multer.memoryStorage(), limits: { fileSize: 20 * 1024 * 1024 } });

app.post("/api/upload", upload.single("file"), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: "no file" });
    const objectKey = `uploads/${Date.now()}-${req.file.originalname}`;
    await saveBuffer(objectKey, req.file.buffer, req.file.mimetype || "application/octet-stream");
    const url = await getSignedUrl(objectKey, 600); // 10分
    res.json({ ok: true, key: objectKey, size: req.file.size, url });
  } catch (e) {
    console.error(e);
    res.status(500).json({ ok: false, error: String(e) });
  }
});

// 署名付きURLでダウンロードさせたい場合の簡易エンドポイント
app.get("/api/download", async (req, res) => {
  try {
    const key = req.query.key;
    if (!key) return res.status(400).send("key required");
    const url = await getSignedUrl(String(key), 300);
    res.redirect(302, url);
  } catch (e) {
    console.error(e);
    res.status(500).send("error");
  }
});

// フォールバック: public/index.html が無い場合のプレーン表示
app.get("/", (_req, res) => res.send("EduNotes backend is running."));

app.listen(PORT, () => {
  console.log(`edunotes listening on :${PORT}`);
});
