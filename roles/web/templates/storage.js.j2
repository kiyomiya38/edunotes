const { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand } = require("@aws-sdk/client-s3");
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

const BUCKET = process.env.S3_BUCKET;
const REGION = process.env.S3_REGION || "ap-northeast-3";
const ENDPOINT = process.env.S3_ENDPOINT || undefined;
const FORCE = (process.env.S3_FORCE_PATH_STYLE || "false") === "true";
const SIGN_TTL = parseInt(process.env.S3_SIGNED_URL_TTL || "900", 10);

if (!BUCKET) throw new Error("S3_BUCKET is required");

const s3 = new S3Client({ region: REGION, endpoint: ENDPOINT, forcePathStyle: FORCE });

async function saveBuffer(objectKey, buffer, contentType = "application/octet-stream") {
  await s3.send(new PutObjectCommand({ Bucket: BUCKET, Key: objectKey, Body: buffer, ContentType: contentType }));
  return { objectKey, size: buffer.length };
}
async function getSignedUrlForGet(objectKey, ttlSeconds = SIGN_TTL) {
  const cmd = new GetObjectCommand({ Bucket: BUCKET, Key: objectKey });
  return getSignedUrl(s3, cmd, { expiresIn: ttlSeconds });
}
async function remove(objectKey) { await s3.send(new DeleteObjectCommand({ Bucket: BUCKET, Key: objectKey })); }
async function selfCheck() { const k = `.check-${Date.now()}`; await saveBuffer(k, Buffer.from("ok"), "text/plain"); await remove(k); }

module.exports = { saveBuffer, getSignedUrl: getSignedUrlForGet, remove, selfCheck };
