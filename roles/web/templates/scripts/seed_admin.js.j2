// seed_admin.js
const { Client } = require('pg');

// bcrypt はネイティブがなければ bcryptjs にフォールバック（既存方針のまま）
let bcrypt;
try { bcrypt = require('bcrypt'); } catch (_) { bcrypt = require('bcryptjs'); }

(async () => {
  try {
    const dbUrl = process.env.DB_URL;
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@example.com';
    const adminName  = process.env.ADMIN_NAME  || 'Administrator';
    const adminPass  = process.env.ADMIN_SEED_PASSWORD || '';

    if (!dbUrl || !adminPass) {
      console.error('DB_URL or ADMIN_SEED_PASSWORD missing; skip seeding.');
      process.exit(0);
    }

    // 既存スクリプトの方針を崩さない：SSL 既定で厳格。
    // もし環境変数で緩めたい場合は DB_SSL_REJECT_UNAUTHORIZED=false を渡す。
    const sslReject =
      (process.env.DB_SSL_REJECT_UNAUTHORIZED || 'true').toLowerCase() !== 'false';

    const client = new Client({
      connectionString: dbUrl,
      ssl: { rejectUnauthorized: sslReject }
    });
    await client.connect();

    // --- users テーブルの列を検出して、あるものだけ使う ---
    const colRes = await client.query(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema = 'public' AND table_name = 'users'
    `);
    const cols = new Set(colRes.rows.map(r => r.column_name));

    // よくある名称の差異に対応
    const nameCol  = cols.has('name') ? 'name'
                    : cols.has('username') ? 'username'
                    : null;
    const passCol  = cols.has('password_hash') ? 'password_hash'
                    : cols.has('password')    ? 'password'
                    : null;
    const roleCol  = cols.has('role') ? 'role' : null;

    if (!cols.has('email')) {
      throw new Error('users テーブルに email 列がありません（必須）');
    }
    if (!passCol) {
      throw new Error('users テーブルに password_hash / password のいずれかがありません（必須）');
    }

    // 既存ユーザー有無（email は必須）
    const { rows } = await client.query('SELECT id FROM users WHERE email=$1', [adminEmail]);

    if (rows.length === 0) {
      // 挿入用に存在する列のみで SQL を組み立てる
      const columns = ['email', passCol];
      const values  = [adminEmail, await bcrypt.hash(adminPass, 12)];
      if (nameCol) { columns.unshift(nameCol); values.unshift(adminName); } // name/username を入れられるなら入れる
      if (roleCol) { columns.push(roleCol); values.push('admin'); }         // role があれば admin をセット

      // 動的プレースホルダ $1..$n を作成
      const placeholders = values.map((_, i) => `$${i + 1}`);
      const sql = `INSERT INTO users (${columns.join(', ')}) VALUES (${placeholders.join(', ')})`;

      await client.query(sql, values);
      console.log(`Seeded admin user: ${adminEmail}`);
    } else {
      // 既存なら、role 列がある場合のみ引き上げ（元の方針を維持）
      if (roleCol) {
        await client.query(`UPDATE users SET ${roleCol}=$1 WHERE email=$2`, ['admin', adminEmail]);
        console.log(`Ensured admin role for: ${adminEmail}`);
      } else {
        console.log(`User exists and no role column; nothing to update: ${adminEmail}`);
      }
    }

    await client.end();
  } catch (e) {
    console.error('seed_admin error:', e);
    process.exit(1);
  }
})();
